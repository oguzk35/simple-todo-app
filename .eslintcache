[{"/home/hasanoguz/Documents/todo-app/src/index.js":"1","/home/hasanoguz/Documents/todo-app/src/App.js":"2","/home/hasanoguz/Documents/todo-app/src/redux/reducers/todoReducer.js":"3","/home/hasanoguz/Documents/todo-app/src/components/Todos.js":"4","/home/hasanoguz/Documents/todo-app/src/redux/actionTypes.js":"5","/home/hasanoguz/Documents/todo-app/src/components/Todo.js":"6","/home/hasanoguz/Documents/todo-app/src/theme.js":"7","/home/hasanoguz/Documents/todo-app/src/redux/actions/todoActions.js":"8"},{"size":616,"mtime":1611845860220,"results":"9","hashOfConfig":"10"},{"size":3805,"mtime":1611884934892,"results":"11","hashOfConfig":"10"},{"size":1267,"mtime":1611837585947,"results":"12","hashOfConfig":"10"},{"size":551,"mtime":1611921577194,"results":"13","hashOfConfig":"10"},{"size":263,"mtime":1611796266448,"results":"14","hashOfConfig":"10"},{"size":2427,"mtime":1611921409860,"results":"15","hashOfConfig":"10"},{"size":440,"mtime":1611765907827,"results":"16","hashOfConfig":"10"},{"size":553,"mtime":1611796532516,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1vapaf8",{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"/home/hasanoguz/Documents/todo-app/src/index.js",[],["37","38"],"/home/hasanoguz/Documents/todo-app/src/App.js",["39"],"import React, { useState, useEffect } from \"react\";\r\n\r\n// nano id\r\nimport { nanoid } from \"nanoid\";\r\n\r\n// react redux\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { addTodo, updateTodo } from \"./redux/actions/todoActions\";\r\n\r\n// mui comps\r\nimport { Button, TextField, Typography } from \"@material-ui/core\";\r\n\r\n// mui styles\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\n\r\n// mui icons\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport SettingsIcon from \"@material-ui/icons/Settings\";\r\n\r\n// custom comps\r\nimport Todos from \"./components/Todos\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    margin: \"0 auto\",\r\n    width: \"300px\",\r\n  },\r\n  actions: {\r\n    display: \"flex\",\r\n  },\r\n  tf: {\r\n    marginRight: \"5px\",\r\n  },\r\n  addBtn: {\r\n    backgroundColor: theme.palette.success.dark,\r\n    color: \"#ffffff\",\r\n    border: \"none\",\r\n    marginLeft: \"5px\",\r\n  },\r\n  customizeBtn: {\r\n    backgroundColor: theme.palette.warning.dark,\r\n    color: \"#ffffff\",\r\n    border: \"none\",\r\n    width: \"100%\",\r\n    marginTop: \"10px\",\r\n  },\r\n  addBtnUpdate: {\r\n    backgroundColor: theme.palette.warning.light,\r\n    color: \"#ffffff\",\r\n    border: \"none\",\r\n    marginLeft: \"5px\",\r\n  },\r\n  red: {\r\n    backgroundColor: \"red\",\r\n  },\r\n}));\r\n\r\nfunction App() {\r\n  // piece of state\r\n  const [value, setValue] = useState(\"\");\r\n  const [updateMode, setUpdateMode] = useState(false);\r\n\r\n  const todos = useSelector((state) => state.todos);\r\n  const selectedTodo = useSelector((state) => state.selectedTodo);\r\n  const dispatch = useDispatch();\r\n  const theme = useTheme();\r\n  const classes = useStyles();\r\n\r\n  const handleChange = (e) => {\r\n    setValue(e.target.value);\r\n  };\r\n\r\n  const handleAdd = () => {\r\n    setValue(\"\");\r\n    if (updateMode) {\r\n      setUpdateMode(!updateMode);\r\n      if (value.trim() !== \"\") {\r\n        const updatedTodo = {\r\n          ...selectedTodo,\r\n          title: value,\r\n        };\r\n        dispatch(updateTodo(updatedTodo));\r\n      } else {\r\n        console.log(\"lutfen doldurun\");\r\n      }\r\n    } else {\r\n      if (value.trim() !== \"\") {\r\n        const newTodo = {\r\n          id: nanoid(),\r\n          title: value,\r\n          isDone: false,\r\n        };\r\n        dispatch(addTodo(newTodo));\r\n      } else {\r\n        console.log(\"lutfen doldurun\");\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleUpdate = (e) => {\r\n    e.target.classList.add(\"red\");\r\n    setValue(selectedTodo.title);\r\n    setUpdateMode(!updateMode);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div>\r\n        <div className={classes.actions}>\r\n          <TextField\r\n            id=\"enterTodo\"\r\n            className={classes.tf}\r\n            variant=\"outlined\"\r\n            label=\"Enter a Todo\"\r\n            onChange={(e) => handleChange(e)}\r\n            value={value}\r\n          />\r\n          <Button\r\n            id=\"addTodo\"\r\n            variant=\"outlined\"\r\n            onClick={() => handleAdd()}\r\n            className={classes.addBtn}\r\n            style={{\r\n              backgroundColor: updateMode\r\n                ? theme.palette.warning.main\r\n                : theme.palette.success.dark,\r\n            }}\r\n          >\r\n            {updateMode ? <SettingsIcon /> : <AddIcon />}\r\n          </Button>\r\n        </div>\r\n        {Object.keys(selectedTodo).length > 0 && (\r\n          <Button\r\n            id=\"updateTodo\"\r\n            variant=\"outlined\"\r\n            onClick={(e) => handleUpdate(e)}\r\n            className={classes.customizeBtn}\r\n            disabled={updateMode ? true : false}\r\n          >\r\n            <Typography variant=\"button\">EDIT</Typography>\r\n          </Button>\r\n        )}\r\n      </div>\r\n      <Todos todos={todos} /> {/* todo list */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","/home/hasanoguz/Documents/todo-app/src/redux/reducers/todoReducer.js",[],"/home/hasanoguz/Documents/todo-app/src/components/Todos.js",[],"/home/hasanoguz/Documents/todo-app/src/redux/actionTypes.js",[],"/home/hasanoguz/Documents/todo-app/src/components/Todo.js",["40","41"],"/home/hasanoguz/Documents/todo-app/src/theme.js",["42","43"],"import { createMuiTheme } from \"@material-ui/core/styles\";\nimport purple from \"@material-ui/core/colors/purple\";\nimport green from \"@material-ui/core/colors/green\";\nimport yellow from \"@material-ui/core/colors/yellow\";\nimport red from \"@material-ui/core/colors/red\";\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: purple[500],\n    },\n    secondary: {\n      main: yellow[500],\n    },\n  },\n});\n\nexport default theme;\n","/home/hasanoguz/Documents/todo-app/src/redux/actions/todoActions.js",[],{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":1,"column":27,"nodeType":"50","messageId":"51","endLine":1,"endColumn":36},{"ruleId":"48","severity":1,"message":"49","line":1,"column":17,"nodeType":"50","messageId":"51","endLine":1,"endColumn":26},{"ruleId":"48","severity":1,"message":"52","line":59,"column":9,"nodeType":"50","messageId":"51","endLine":59,"endColumn":23},{"ruleId":"48","severity":1,"message":"53","line":3,"column":8,"nodeType":"50","messageId":"51","endLine":3,"endColumn":13},{"ruleId":"48","severity":1,"message":"54","line":5,"column":8,"nodeType":"50","messageId":"51","endLine":5,"endColumn":11},"no-native-reassign",["55"],"no-negated-in-lhs",["56"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'currentElement' is assigned a value but never used.","'green' is defined but never used.","'red' is defined but never used.","no-global-assign","no-unsafe-negation"]